The basic stuff I know. I'll write new things and key points.

Binary Search:-
1)Find the middle element
2) If target>mid => Search in right. 
   If target < mid => Search in left.
   If  target == mid => found answer 

3) If start > end => element not found.    

Why Binary Search:-
The maximum number of comparison it makes are ..
For n = 1000000(1million)
L.S = 1000000 comparisons
B.S = 20 comparisons

Complexity is O(logn).


CODE
//return the index
//return -1 if not exist
static int binarySearch(int[] arr , int key){
   int start = 0;
   int end = arr.length-1;
   while(start<=end){
    int mid = start + (end-start)/2;
    if(target<arr[mid]){
        end = mid-1;
    }
    else if(target > arr[mid]){
        start = mid+1;
    }else{
        return mid;
    }
    return -1;
 }
}
The above code is for array in ascendingorder.

For array in descending order
static int binarySearch(int[] arr , int key){
   int start = 0;
   int end = arr.length-1;
   while(start<=end){
    int mid = start + (end-start)/2;
    if(target>arr[mid]){
        end = mid-1;
    }
    else if(target < arr[mid]){
        start = mid+1;
    }else{
        return mid;
    }
    return -1;
 }
}

To check whether a given sorted array is in ascending or descending order. Compare first and last element.(Recommedned).

Beacause comparing first and second element might give wrong result when both equal. But for first and last elem if both equal then array will have all elem equal.