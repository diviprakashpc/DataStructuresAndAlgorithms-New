Q- Ceil of a number in a sorted array?
Ans: The ceil of an number is element just greater or equal to that number.

So in binary search the intution is answer always lies between start and end. Only the search is halfed everytime.

Therefore,

s          target           end

               s    target  end

                       s target end

                         end target s 

So when loop breaking codition hit, we have our target bwetween end and start.
So the just greater element will lie at start.(Element next to target).

Therefore code for ceil would be same as of binary search , but instead of returning -1 we return start. Because if nothing is returned from the while loop then it means target is not found . And hence we return element just greater than targetr which will be present at start.

Code :
static int ceil(int[] arr , int key){
   int start = 0;
   int end = arr.length-1;
   while(start<=end){
    int mid = start + (end-start)/2;
    if(target<arr[mid]){
        end = mid-1;
    }
    else if(target > arr[mid]){
        start = mid+1;
    }else{
        return mid;
    }
    return start;
 }
}


Q-Floor of a number?
Ans:The floor of an number is element just smaller or equal to that number.
s          target           end

               s    target  end

                       s target end

                         end target s 


When while loop breaks element is not found. And intutiontively(By intuition), target lies between end and start. The start is pointing to element just greater than target and end to element just smaller than target. Therfore our answer would be end.

Code :- 
static int floor(int[] arr , int key){
   int start = 0;
   int end = arr.length-1;
   while(start<=end){
    int mid = start + (end-start)/2;
    if(target<arr[mid]){
        end = mid-1;
    }
    else if(target > arr[mid]){
        start = mid+1;
    }else{
        return mid;
    }
    return end;
 }
}



The final scenario when loop breaks if element is not found is:

end   target  start

where start = end + 1. 
And intutively target is present between them. Because thats what we are maintaning in whole binary search.
Therefore start is element just greater than target and end is elemen just smaller than target.